"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@schematics/angular/utility/workspace");
const config_1 = require("./../utils/config");
function addCordovaBuilder(projectName) {
    return (host) => {
        (0, config_1.addArchitectBuilder)(host, projectName, 'ionic-cordova-serve', {
            builder: '@ionic/cordova-builders:cordova-serve',
            options: {
                cordovaBuildTarget: `${projectName}:ionic-cordova-build`,
                devServerTarget: `${projectName}:serve`,
            },
            configurations: {
                production: {
                    cordovaBuildTarget: `${projectName}:ionic-cordova-build:production`,
                    devServerTarget: `${projectName}:serve:production`,
                },
            },
        });
        (0, config_1.addArchitectBuilder)(host, projectName, 'ionic-cordova-build', {
            builder: '@ionic/cordova-builders:cordova-build',
            options: {
                browserTarget: `${projectName}:build`,
            },
            configurations: {
                production: {
                    browserTarget: `${projectName}:build:production`,
                },
            },
        });
        return host;
    };
}
function ngAdd(options) {
    return async (host) => {
        const workspace = await (0, workspace_1.getWorkspace)(host);
        if (!options.project) {
            options.project = (0, config_1.getDefaultAngularAppName)(workspace);
        }
        const project = workspace.projects.get(options.project);
        if (!project || project.extensions.projectType !== 'application') {
            throw new schematics_1.SchematicsException(`Ionic Add requires a project type of "application".`);
        }
        return (0, schematics_1.chain)([addCordovaBuilder(options.project)]);
    };
}
exports.default = ngAdd;
